!(function(t, e) {
"object" == typeof exports && "undefined" != typeof module
? (module.exports = e(require("three-full")))
: "function" == typeof define && define.amd
? define(["three-full"], e)
: (t.THREEConeFrustum = e(t.THREE));
})(this, function(t) {
"use strict";
const e = (t = t && t.hasOwnProperty("default") ? t.default : t).Box3,
s = t.Vector3,
i = t.Matrix4,
a = t.BoxBufferGeometry,
o = new s(),
n = (new s(), new s()),
r = (new s(), new i()),
h = new a(2, 2, 2).toNonIndexed().attributes.position;
class c {
constructor(t, e, i, a, o) {
(this.base = t || new s()),
(this.axis = e || new s(0, 1, 0)),
this.axis.normalize(),
(this.height = i || 1),
(this.radius0 = a || 0),
(this.radius1 = o || 0);
}
static fromCapsule(t, e, i, a) {
if (e > a) return this.fromCapsule(i, a, t, e);
const o = new s().subVectors(i, t);
if (0 === o.length()) throw "Capsule height must not be zero";
const n = (a - e) / o.length(),
r = o.length() + n * (e - a),
h = new s().copy(t).addScaledVector(o.normalize(), -n * e),
u = Math.cos(Math.asin(n));
return new c(h, o, r, e * u, a * u);
}
orthogonalProject(t, e) {
const s = o;
s.subVectors(t, this.base);
const i = s.lengthSq(),
a = s.dot(this.axis),
n = i - a * a,
r =
a - ((n > 0 ? Math.sqrt(n) : 0) * (this.radius0 - this.radius1)) / this.height;
e
.copy(this.axis)
.multiplyScalar(r)
.add(this.base);
}
copy(t) {
(this.base = t.base.clone()),
(this.axis = t.axis.clone()),
(this.height = t.height),
(this.radius0 = t.radius0),
(this.radius1 = t.radius1);
}
clone() {
return new c().copy(this);
}
empty() {
return 0 === this.height || (0 === this.radius0 && 0 === this.radius1);
}
getBoundingBox(t) {
const i = this.base.clone(),
a = new s();
a.set(
Math.sqrt(1 - this.axis.x * this.axis.x),
Math.sqrt(1 - this.axis.y * this.axis.y),
Math.sqrt(1 - this.axis.z * this.axis.z)
),
a.multiplyScalar(this.radius0);
const o = new e(new s().subVectors(i, a), new s().addVectors(i, a));
a.divideScalar(this.radius0),
a.multiplyScalar(this.radius1),
i.addScaledVector(this.axis, this.height);
const n = new e(new s().subVectors(i, a), new s().addVectors(i, a));
return o.union(n), null != t && t.copy(o), o;
}
computeOptimisedBoundingCube(t) {
const e = h.clone(),
s = Math.max(this.radius0, this.radius1);
r.makeScale(s, this.height / 2, s), e.applyMatrix4(r), o.set(0, 1, 0);
const i = o.angleTo(this.axis);
return (
o.cross(this.axis).normalize(),
o.length() > 0 && (r.makeRotationAxis(o, i), e.applyMatrix4(r)),
o
.copy(this.base)
.addScaledVector(this.axis, this.height / 2)
.sub(t),
r.makeTranslation(o.x, o.y, o.z),
e.applyMatrix4(r),
e.array
);
}
static computeOptimisedDownscalingBoundingCube(e, i, a, h, c, u) {
if (i > h)
return this.computeOptimisedDownscalingBoundingCube(a, h, e, i, c, u);
const d = new Float32Array([
-1,
-1,
-1,
1,
-1,
-1,
-1,
-1,
1,
1,
-1,
1,
-1,
1,
-1,
1,
1,
-1,
-1,
1,
1,
1,
1,
1,
-1,
1,
-1,
1,
1,
-1,
-1,
1,
1,
1,
1,
1
]),
l = [
0,
1,
3,
0,
3,
2,
6,
4,
0,
6,
0,
2,
7,
6,
2,
7,
2,
3,
5,
7,
3,
5,
3,
1,
4,
5,
1,
4,
1,
0,
10,
8,
4,
10,
4,
6,
11,
10,
6,
11,
6,
7,
9,
11,
7,
9,
7,
5,
8,
9,
5,
8,
5,
4,
9,
8,
10,
9,
10,
11
],
p = function() {
const t = new Float32Array(3 * l.length);
for (let e = 0; e < l.length; e++) {
const s = 3 * l[e];
(t[3 * e] = d[s]), (t[3 * e + 1] = d[s + 1]), (t[3 * e + 2] = d[s + 2]);
}
return t;
},
x = new s().subVectors(a, e);
if (0 === x.length()) throw "Capsule height must not be zero";
const g = (h - i) / x.length();
if (Math.abs(g) >= (1 / u) * 0.9999) {
x.addVectors(e, a).multiplyScalar(0.5);
for (let t = 0; t < d.length; t += 3)
(d[t] = x.x), (d[t + 1] = x.y), (d[t + 2] = x.z);
return p();
}
if (Math.abs(g) > 1)
return this.computeOptimisedDownscalingBoundingCube(e, u * i, a, u * h, c, 1);
const y = Math.cos(Math.asin(g)),
f = x.length() + g * (i - u * u * h),
m = x.length() + g * (i - h);
n.copy(e).addScaledVector(x.normalize(), -g * i);
const b = h * y;
let w = b > 0 ? (i * y) / b : 1;
for (let t = 0; t < 12; t += 3) (d[t] *= w), (d[t + 2] *= w);
w = (Math.cos(Math.asin(u * g)) * h * u) / b;
for (let t = 24; t < 36; t += 3) (d[t] *= w), (d[t + 2] *= w);
const M = (2 * m) / f - 1;
for (let t = 12; t < 24; t += 3) d[t + 1] = M;
const V = new t.BufferAttribute(p(), 3);
r.makeScale(b, f / 2, b), V.applyMatrix4(r), o.set(0, 1, 0);
const S = o.angleTo(x),
z = o.dot(x);
return (
o.cross(x).normalize(),
o.length() > 0
? (r.makeRotationAxis(o, S), V.applyMatrix4(r))
: z < 0 && (r.makeRotationZ(Math.PI), V.applyMatrix4(r)),
null != c &&
(o
.copy(n)
.addScaledVector(x, f / 2)
.sub(c),
r.makeTranslation(o.x, o.y, o.z),
V.applyMatrix4(r)),
V.array
);
}
equals(t) {
return (
this.base.equals(t.base) &&
this.axis.equals(t.axis) &&
this.height === t.height &&
this.radius0 === t.radius0 &&
this.radius1 === t.radius1
);
}
}
(t.ConeFrustum = c),
(t.Ray.prototype.intersectsConeFrustum = (function() {
const t = new s(),
e = new s(),
i = new s();
return function(s, a) {
null == a && (a = e);
const o = s.radius1 - s.radius0,
n = 1 + Math.pow(o / s.height, 2),
r = (s.radius0 * o) / s.height;
t.subVectors(this.origin, s.base);
const h = t.dot(s.axis),
c = t.dot(t),
u = this.direction.dot(s.axis),
d = this.direction.dot(t),
l = this.direction.dot(this.direction),
p = s.radius0 * s.radius0 + 2 * r * h + n * h * h - c,
x = r * u + n * h * u - d,
g = n * u * u - l;
if (0 !== g) {
const o = x * x - g * p;
if (o < 0) return null;
if (0 !== o) {
let n = 0;
const r = Math.sqrt(o),
h = (-x - r) / g;
i.copy(t), i.addScaledVector(this.direction, h);
let c = s.axis.dot(i);
h >= 0 && c >= 0 && c <= s.height && (e.addVectors(s.base, i), n++);
const u = (-x + r) / g;
return (
i.copy(t),
i.addScaledVector(this.direction, u),
(c = s.axis.dot(i)),
u >= 0 &&
(0 === n || h > u) &&
c >= 0 &&
c <= s.height &&
(e.addVectors(s.base, i), n++),
n && a.copy(e),
n ? e : null
);
}
{
const o = -x / g;
i.copy(t), i.addScaledVector(this.direction, o);
const n = s.axis.dot(i);
if (o >= 0 && n >= 0 && n <= s.height)
return e.addVectors(s.base, i), a.copy(e), e;
}
} else if (0 !== x) {
const o = (-2 * p) / x;
i.copy(t), i.addScaledVector(this.direction, o);
const n = s.axis.dot(i);
if (o >= 0 && n >= 0 && n <= s.height)
return e.addVectors(s.base, i), a.copy(e), a;
}
return null;
};
})());
return {};
});
